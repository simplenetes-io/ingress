#!/usr/bin/env sh
# Script assembled and exported by:
#     ___ ___  ___  ____ ____  ___ __ __
#    / __/ _ \/ _ |/ ___/ __/ / __/ // /
#   _\ \/ ___/ __ / /__/ _/_ _\ \/ _  /
#  /___/_/  /_/ |_\___/___(_)___/_//_/
#  version: 1.4.0 | https://space.sh
#
# Node: /run/

set -u  # Will not allow for unset variables being used.

autoCertClusterPort="${autoCertClusterPort:-}"
certDir="${certDir:-/mnt/autocerts}"
SPACE_LOG_LEVEL="${SPACE_LOG_LEVEL:-4}"
SPACE_LOG_ENABLE_COLORS="${SPACE_LOG_ENABLE_COLORS:-1}"
SPACE_ASSERT_EXIT="${SPACE_ASSERT_EXIT:-0}"
SPACE_MUTE_EXIT="${SPACE_MUTE_EXIT:-0}"
SPACE_MUTE_EXIT_MESSAGE="${SPACE_MUTE_EXIT_MESSAGE:-0}"
FETCHER_RUN()
{
    local _SPACE_NAME="FETCHER_RUN"

    if [ -z "${autoCertClusterPort}" ]; then
        PRINT "Missing env variable autoCertClusterPort" "error" 0
        return 1
    fi

    if [ ! -d "${certDir}" ]; then
        PRINT "Cert dir does not exist: ${certDir}" "error" 0
        return 1
    fi

    PRINT "Connect to cert-generator service to retrieve bundle of certs" "debug" 0

    local tarFile="/tmp/certs.tar.gz"

    if ! curl -Lso "${tarFile}" "http://proxy:${autoCertClusterPort}/certs.tar.gz"; then
        PRINT "Could not communicate with cert-generator on cluster port ${autoCertClusterPort}" "error" 0
        return 1
    fi

    local hashFile="/tmp/certs.tar.gz.hash"
    local hash="$(FILE_CHECKSUM "${tarFile}")"

    if [ -f "${hashFile}" ]; then
        if printf "%s\\n" "${hash}" | diff - "${hashFile}" 2>/dev/null >&2; then
            return 0
        fi
    fi

    local tmpDir="/tmp/certs"

    rm -rf "${tmpDir}"
    mkdir -p "${tmpDir}"

    # Note: possibly we want to remove certificates which are not in the bundle anymore?
    # If stray certificates do no harm we can let them linger here, when the box is rebooted the ramdisk
    # will get wiped anyways.
    if tar -xvzf "${tarFile}" -C "${tmpDir}"; then
        printf "%s\\n" "${hash}" >"${hashFile}"
        mv "${tmpDir}"/*.pem "${certDir}"
        PRINT "Unpacked certs" "ok" 0
    else
        PRINT "Could not untar file" "error" 0
        return 1
    fi
}

PRINT()
{
    local color=''
    local header=''
    [ "${3:-1}" = 1 ] && {
        local _SPACE_NAME="${_SPACE_NAME:-anonymous}: ";
    } || {
        local _SPACE_NAME="";
    }

    case "${2:-info}" in
        error)
            if [ "${SPACE_LOG_LEVEL:-4}" -lt 1 ]; then return; fi
            header="[ERROR] "; color="\033[31m"
            ;;
        security)
            if [ "${SPACE_LOG_LEVEL:-4}" -lt 1 ]; then return; fi
            header="[SEC]   "; color="\033[35m"
            ;;
        warning)
            if [ "${SPACE_LOG_LEVEL:-4}" -lt 2 ]; then return; fi
            header="[WARN]  "; color="\033[33m"
            ;;
        ok)
            if [ "${SPACE_LOG_LEVEL:-4}" -lt 3 ]; then return; fi
            header="[OK]    "; color="\033[32m"
            ;;
        info)
            if [ "${SPACE_LOG_LEVEL:-4}" -lt 4 ]; then return; fi
            header="[INFO]  "; color="\033[37m"
            ;;
        debug)
            if [ "${SPACE_LOG_LEVEL:-4}" -lt 5 ]; then return; fi
            header="[DEBUG] "; color=""
            ;;
        *)
            return
            ;;
    esac
    if [ "${SPACE_LOG_ENABLE_COLORS}" = "1" ] && [ -t 2 ]; then
        printf "${color}%s%s%s\033[0m\n" "${header}" "${_SPACE_NAME}" "${1}" >&2
    else
        printf "%s%s%s\n" "${header}" "${_SPACE_NAME}" "${1}" >&2
    fi
}

FILE_CHECKSUM()
{
    local _SPACE_NAME="FILE_CHECKSUM"

    local file="${1}"
    shift

    local _SHASUMBIN=
    if command -v sha256sum >/dev/null; then
        _SHASUMBIN=sha256sum
    elif command -v sha1sum >/dev/null; then
        _SHASUMBIN=sha1sum
    elif command -v shasum >/dev/null; then
        _SHASUMBIN="shasum -a 256"
    elif command -v md5sum >/dev/null; then
        _SHASUMBIN="md5sum"
    else
        return 1
    fi

    ${_SHASUMBIN} "${file}" | cut -f 1 -d' '
}

main()
{
    FETCHER_RUN 

    # Space will print exit status.
    local _status=$?
    if [ "${_status}" -ne "${SPACE_ASSERT_EXIT}" ]; then
        if [ "${SPACE_MUTE_EXIT_MESSAGE}" != "1" ] && [ "${SPACE_LOG_LEVEL}" -ge 1 ]; then
            [ "${SPACE_LOG_ENABLE_COLORS:-1}" = "1" ] && [ -t 2 ] && printf "\033[31m" >&2
            printf "%s\n" "[ERROR] Script exited with status $_status for node /run/" >&2
            [ "${SPACE_LOG_ENABLE_COLORS:-1}" = "1" ] && [ -t 2 ] && printf "\033[0m" >&2
        fi
        if [ "${SPACE_MUTE_EXIT}" != 1 ]; then
            return $((SPACE_ASSERT_EXIT == 0 ? _status : 1))
        fi
    elif [ "${SPACE_MUTE_EXIT_MESSAGE}" != "1" ] && [ "${SPACE_LOG_LEVEL}" -ge 5 ]; then
        [ "${SPACE_LOG_ENABLE_COLORS:-1}" = "1" ] && [ 5 -eq 3 ] && [ -t 2 ] && printf "\033[32m" >&2
        printf "%s\n" "[DEBUG] Script exited with success (status $_status) for node /run/" >&2
        [ "${SPACE_LOG_ENABLE_COLORS:-1}" = "1" ] && [ 5 -eq 3 ] && [ -t 2 ] && printf "\033[0m" >&2
        : # Important to reset status here.
    fi
}

main "$@"
